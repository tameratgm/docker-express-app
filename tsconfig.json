{
  "compilerOptions": {
    /* Basic Options */
    // "incremental": true,                   /* Enable incremental compilation */
    "target": "es2017" /* Specify ECMAScript target version */,
    "lib": [
      "es5",
      "es6",
      "es7",
      "es2015",
      "es2016",
      "es2017",
      "es2018",
      "esnext"
    ] /* Specify library files to be included in the compilation. */,
    "module": "commonjs" /* Specify module code generation: 'none', 'commonjs', 'amd',                                             'system', 'umd', 'es2015', or 'ESNext'. */,
    //"allowJs": true /* Allow javascript files to be compiled. */,
    //"checkJs": true /* Report errors in .js files. */,
    "declaration": true /* Generates corresponding '.d.ts' file. */,
    "declarationMap": true /* Generates a sourcemap for each corresponding '.d.ts' file. */,
    // "outFile": "./",                       /* Concatenate and emit output to single file. */
    "outDir": "dist" /* Redirect output structure to the directory. */,
    // "rootDir": "./src" /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */,
    // "composite": true,                     /* Enable project compilation */
    // "tsBuildInfoFile": "./",               /* Specify file to store incremental compilation information */
    "removeComments": true /* Do not emit comments to output. */,
    // "isolatedModules": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */
    "experimentalDecorators": true,
    "emitDecoratorMetadata": true,

    /* Strict Type-Checking Options */
    "strict": true /* Enable all strict type-checking options. */,

    /* Additional Checks */
    "noUnusedLocals": true /* Report errors on unused locals. */,
    "noFallthroughCasesInSwitch": true /* Report errors for fallthrough cases in switch statement. */,

    /* Module Resolution Options */
    "resolveJsonModule": true,
    "moduleResolution": "node" /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */,
    // "baseUrl": "./",                       /* Base directory to resolve non-absolute module names. */
    // "paths": {},                           /* A series of entries which re-map imports to lookup                                                     locations relative to the 'baseUrl'. */
    // "rootDirs": [],                        /* List of root folders whose combined content represents                                                 the structure of the project at runtime. */
    // "typeRoots": [],                       /* List of folders to include type definitions from. */
    // "types": [],                           /* Type declaration files to be included in compilation. */
    "esModuleInterop": true /* Enables emit interoperability between CommonJS and ES                                                  Modules via creation of namespace objects for all                                                      imports. Implies 'allowSyntheticDefaultImports'. */

    /* Source Map Options */
    // "sourceMap": true,                        /* Generates corresponding '.map' file. */
    // "inlineSourceMap": false,               /* Emit a single file with source maps instead of having a                                                separate file. */
    // "inlineSources": true                 /* Emit the source alongside the sourcemaps within a single file;                                         requires '--inlineSourceMap' or '--sourceMap' to be set. */
  },
  "exclude": ["node_modules", "dist"]
}
